% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vintages.R
\name{create_vintages}
\alias{create_vintages}
\title{Create vintage tables from data.frame}
\usage{
create_vintages(
  df,
  periodicity,
  vintage.selection = NULL,
  revdate.format = "\%Y-\%m-\%d"
)
}
\arguments{
\item{df}{a formatted data.frame containing the input. It must be composed of
three columns in this order: revision date, time period and value:
Revision date should be in a Date format specified in
`revdate.format` argument. Time period should be mentioned in
YYM., YYQ. or YEAR. format. Examples of correct formats are
2023M01, 2023Q1 or 2023. Finally, the values should be numeric.}

\item{periodicity}{periodicity of the time period (12, 4 or 1 for resp.
monthly,quarterly or annual data)}

\item{vintage.selection}{a list specifying the range of revision dates to
retain. As an example: list(start="2022-02-02",
end="2022-08-05") would keep all the vintages whose
revision date is between 02Feb.2022 and 05Aug.2022.
If NULL (the default), the whole range is
selected.}

\item{revdate.format}{character string corresponding to the format used in
the input data.frame for the revision dates.}
}
\value{
an object of class `rjd3rev_vintages`
}
\description{
From the input data.frame, the function displays vintages considering three
different data structures or views: vertical, horizontal and diagonal. See
the `details` section below for more information on the different views. The
function returns an object of class `rjd3rev_vintages` that can be used as
input in the main function `revision_analysis`.
}
\details{
The are three different vintage views:

1. The vertical view shows the observed values at each time period by the
different vintages. This approach is robust to changes of base year and
data redefinition. A drawback of this approach is that for comparing the
same historical series for different vintages, we need to look at the
smallest common number of observations and consequently the number of
observations is in some circumstances very small. Moreover, it is often the
the case that most of the revision is about the last few points of the
series so that the number of observations is too small to test anything.

2. The horizontal view shows the observed values of the different vintages
by the period. A quick analysis can be performed by rows in order to see
how for the same data point (e.g. 2023Q1), figures are first estimated,
then forecasted and finally revised. The main findings are usually obvious:
in most cases the variance decreases, namely data converge towards the
'true value'. Horizontal tables are just a transpose of vertical tables and
are not used in the tests in `revision_analysis`.

3. The diagonal view shows subsequent releases of a given time period,
without regard for the date of publication. The advantage of the diagonal
approach is that it gives a way to analyse the trade between the timing of
the release and the accuracy of the published figures. It is particularly
informative when regular estimation intervals exist for the data under
study. However, this approach requires to be particularly vigilant in case
there is a change in base year or data redefinition.
}
\examples{
df<-data.frame(rev_date = c(rep("2022-07-31",4), rep("2022-08-31",4),
                            rep("2022-09-30",4), rep("2022-10-31",4),
                            rep("2022-11-30",4), rep("2022-12-31",4),
                            rep("2023-01-31",4), rep("2023-02-28",4)),
               time_period = c(rep(c("2022Q1","2022Q2","2022Q3","2022Q4"),8)),
               obs_values = c(.8,.2,NA,NA, .8,.1,NA,NA,
                                .7,.1,NA,NA, .7,.2,.5,NA,
                                .7,.2,.5,NA, .7,.3,.7,NA,
                                .7,.2,.7,.4, .7,.3,.7,.3))
vintages<-create_vintages(df, periodicity = 4)

## including vintage selection
vintages<-create_vintages(df, periodicity = 4,
                          vintage.selection = list(start="2022-10-31", end="2023-01-31"))

## specifying the format of revision dates
vintages<-create_vintages(df, periodicity = 4, revdate.format= "\%Y-\%m-\%d")

}
